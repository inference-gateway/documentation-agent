// Code generated by ADL CLI v0.10.2 on 2025-09-02 19:35:54. DO NOT EDIT.
// This file was automatically generated from an ADL (Agent Definition Language) specification.
// Manual changes to this file may be overwritten during regeneration.

package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/inference-gateway/adk/server"
	"github.com/inference-gateway/adk/server/config"
	"github.com/sethvargo/go-envconfig"
	"go.uber.org/zap"

	"github.com/inference-gateway/documentation-agent/tools"
)

// Config represents the application configuration
type Config struct {
	// Core application settings
	Environment string `env:"ENVIRONMENT"`

	// A2A framework configuration (all A2A_ prefixed vars)
	A2A config.Config `env:",prefix=A2A_"`
}

var (
	Version          = "0.1.0"
	AgentName        = "documentation-agent"
	AgentDescription = "Assistant for managing and searching through Documentations queries"
)

func main() {
	ctx := context.Background()

	var cfg Config
	if err := envconfig.Process(ctx, &cfg); err != nil {
		log.Fatal("failed to load config:", err)
	}

	var logger *zap.Logger
	var err error
	if cfg.A2A.Debug || cfg.Environment == "dev" || cfg.Environment == "development" {
		logger, err = zap.NewDevelopment()
	} else {
		logger, err = zap.NewProduction()
	}
	if err != nil {
		log.Fatal("failed to initialize logger:", err)
	}
	defer logger.Sync()

	logger.Info("starting documentation-agent agent",
		zap.String("version", Version),
		zap.String("environment", cfg.Environment),
	)
	logger.Debug("loaded configuration")

	toolBox := server.NewDefaultToolBox()

	// Register resolve_library_id tool
	resolve_library_idTool := tools.NewResolveLibraryIDTool()
	toolBox.AddTool(resolve_library_idTool)
	logger.Info("registered tool", zap.String("tool", "resolve_library_id"), zap.String("description", "Resolves library by its id"))

	// Register get_library_docs tool
	get_library_docsTool := tools.NewGetLibraryDocsTool()
	toolBox.AddTool(get_library_docsTool)
	logger.Info("registered tool", zap.String("tool", "get_library_docs"), zap.String("description", "Get the docs for the specific library"))

	agent, err := server.NewAgentBuilder(logger).
		WithConfig(&cfg.A2A.AgentConfig).
		WithToolBox(toolBox).
		WithSystemPrompt(`You are a helpful assistant for managing and searching through Documentations queries. You can use MCP Client context7 for searching docs.
`).
		Build()
	if err != nil {
		logger.Fatal("failed to create agent", zap.Error(err))
	}

	a2aServer, err := server.NewA2AServerBuilder(cfg.A2A, logger).
		WithAgent(agent).
		WithAgentCardFromFile(".well-known/agent.json", map[string]any{
			"name":        AgentName,
			"version":     Version,
			"description": AgentDescription,
			"url":         cfg.A2A.AgentURL,
		}).
		WithDefaultBackgroundTaskHandler().
		WithDefaultStreamingTaskHandler().
		Build()
	if err != nil {
		logger.Fatal("failed to create A2A server", zap.Error(err))
	}

	go func() {
		logger.Info("starting A2A server",
			zap.String("port", cfg.A2A.ServerConfig.Port),
		)
		if err := a2aServer.Start(ctx); err != nil {
			logger.Fatal("server failed to start", zap.Error(err))
		}
	}()

	logger.Info("documentation-agent agent running successfully",
		zap.String("port", cfg.A2A.ServerConfig.Port),
		zap.String("environment", cfg.Environment),
	)

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	logger.Info("shutdown signal received, gracefully stopping server...")
	a2aServer.Stop(ctx)
	logger.Info("documentation-agent agent stopped")
}
